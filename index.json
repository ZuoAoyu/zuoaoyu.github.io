[{"categories":null,"contents":"在用SuperMemo复习时，一边要移动鼠标，浏览卡片内容，一边要用键盘评分、修改卡片内容，容易手忙脚乱。把评分常用的按键和其他一些按键映射到游戏手柄上可以稍微方便一点。\n游戏手柄：八位堂Zero2小手柄。 软件：AntiMicroX\n手柄连接计算机 看说明书即可。\n在AntiMicroX中设定快捷键 打开软件后，点手柄上的按键，可以看到有的按键映射是错的，点软件窗口左下角的“游戏控制器映射”，先矫正一遍。\n然后在软件主窗口中找到你想设定快捷键的按键（可以通过按手柄上的对应按键确定它的位置），鼠标点击，设定快捷键即可。\n在我的SuperMemo中，目前是有很多的摘录卡片，以及很少的填空题卡片。我习惯于一边复习一边编辑卡片内容，比如把一段紧凑的话分成一行一行的句子，修改一些措辞。\n在SM中，当我的鼠标点击了卡片，可以看作我进入了“编辑模式”，如果这张卡片看完了，想进入下一张卡片，我需要先退出“编辑模式”（按ESC），再按回车键。可以把这两个键简化为一个键，在游戏手柄上按一次，无论你是不是在“编辑模式”，都可以跳转到下一张卡片。\n在AntiMicroX窗口中鼠标点击按键，在弹出的窗口中点击“高级选项”，又弹出一个窗口，在“分配”栏里点击“小方块”（里面出现\u0026quot;\u0026hellip;\u0026quot;），这时候在键盘上输入想设定的按键。设定两个按键，那么点击游戏手柄上的按键时，这两个按键会依次执行。\n我的按键设定 设定原则是，使用越多的按键放在越容易按的位置。\n使用手柄时我习惯竖着拿。除了十字方向键（我不用），最不方便按的是左肩键，其次是右肩键，然后是开始键和选择键。\n因此，我的设定是：\n左肩键，评分5。一是用的少，二来对一张卡片评分5时需要调整手的握姿，这样就会很慎重、很有仪式感。如果这种情况下还非要把一张卡片评分为5，说明真的掌握的很好了。\n右肩键，评分2。答错时按的。\nA，评分3。最容易按的键。\nX，评分1。\nB，评分4。\nY，ESC+Enter，切换到下一张卡片。\n这是一件很主观的事情，怎么舒服怎么来。\n全文完。\n","date":"Dec 30","permalink":"https://o5o.me/post/supermemo-gamepad/","tags":null,"title":"游戏手柄用于SuperMemo复习"},{"categories":null,"contents":"编写一个名为is_abecedarian 的函数, 如果单词中的字符以字符表的顺序出现 (允许重复字符),则返回True。有多少个具备这种特征的单词?\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 def word_abcde(word): alphabets = \u0026#34;abcdefghijklmnopqrstuvwxyz\u0026#34; i = 0 front = 0 #前一个字母的序数 mine = 0 #当前字母的序数 while i \u0026lt; len(word): index = 0 while index \u0026lt; len(alphabets): # print(i,word[i],index,alphabets[index]) if word[i] == alphabets[index]: mine = index if mine \u0026lt; front: return False else: front = mine break index += 1 i += 1 return True def is_abecedarian(file_in): count = 0 for line in file_in: word = line.strip() if word_abcde(word): count += 1 #print(word) print(count) fin = open(\u0026#39;words.txt\u0026#39;) is_abecedarian(fin) 我所使用的这个单词表里，这样的单词有596个。\n","date":"Dec 29","permalink":"https://o5o.me/post/think_python_exercise_9.6/","tags":null,"title":"Think Python Exercise 9.6"},{"categories":null,"contents":"编写一个名为uses_all的函数,接受一个单词和一个必须使用的字符组成的字符串。如果该单词包括此字符串中的全部字符至少一次,则返回True。你能统计出多少单词包含了所有的元音字符aeiou吗?如果换成aeiouy 呢?\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 def uses_all(word, muststr): for i in muststr: count = 0 index = 0 while index \u0026lt; len(word): if i == word[index]: break index += 1 if index == len(word): return False return True def count_word(file_in, als): count = 0 for line in file_in: word = line.strip() if uses_all(word, als): count += 1 print(count,\u0026#34;个单词包含了\u0026#34;,als,\u0026#34;所有的字符\u0026#34;) fin = open(\u0026#39;words.txt\u0026#39;) count_word(fin, \u0026#34;aeiouy\u0026#34;) 运行结果：\n598 个单词包含了 aeiou 所有的字符\n42 个单词包含了 aeiouy 所有的字符\n可以发现，uses_all函数和9.4的uses_only函数的实现一模一样，其实没必要再写一遍。\n","date":"Dec 29","permalink":"https://o5o.me/post/think_python_exercise_9.5/","tags":null,"title":"Think Python Exercise 9.5"},{"categories":null,"contents":"编写一个名为 avoids 的函数，接受一个单词和一个指定禁止使用字符的字符串，如果单词中不包含任意被禁止的字符，则返回True 。\n修改你的程序，提示用户输入一个禁止使用的字符，然后打印不包含这些字符的单词的数量。你能找到一个5个禁止使用字符的组合，使得其排除的单词数目最少么？\n你能找到一个\u0026quot;5个禁止使用字符\u0026quot;的组合，使得其排除的单词数目最少么？ 分析：从26个字母中挑选5个字母构成一个组合，打印不包含这些字母的单词的数量，看哪个组合下被排除出去的单词数目最少。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def avoids(word,ause): #ause，avoid use for i in ause: for letter in word: if letter == i: return False return True def has_no_string(file_in, nals): #nals指的是no alphabets，字母 count_nals = 0 #不含用户指定的各个字符的单词的个数 for line in file_in: word = line.strip() if avoids(word,nals): count_nals += 1 print(\u0026#34;不含\u0026#34;,nals,\u0026#34;的单词有\u0026#34;,count_nals,\u0026#34;个\u0026#34;) text = input(\u0026#34;请输入一个禁止使用的字符串，字符串里的字母都不会出现在单词中\\n\u0026#34;) fin = open(\u0026#39;words.txt\u0026#39;) has_no_string(fin,text) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 def avoids(word,ause): #ause，avoid use for i in ause: for letter in word: if letter == i: return False return True def has_no_string(file_in, nals): #nals指的是no alphabets，字母 count_nals = 0 #不含用户指定的各个字符的单词的个数 for line in file_in: word = line.strip() if avoids(word,nals): count_nals += 1 # print(\u0026#34;不含\u0026#34;,nals,\u0026#34;的单词有\u0026#34;,count_nals,\u0026#34;个\u0026#34;) return count_nals def alp5group(file_in): #5个字母的组合，起名困难 alphabets = \u0026#34;abcdefghijklmnopqrstuvwxyz\u0026#34; count_word = 0 # 不含指定的5个字母的单词的数量 namegroup = \u0026#39;\u0026#39; # 不含5个字符的组合，单词最多 i = 0 while i \u0026lt; len(alphabets): group = \u0026#39;\u0026#39; group += alphabets[i] j = 1 while j \u0026lt; len(alphabets[i:]): group += alphabets[i+j] k = 1 while k \u0026lt; len(alphabets[i+j:]): group += alphabets[i+j+k] l = 1 while l \u0026lt; len(alphabets[i+j+k:]): group += alphabets[i+j+k+l] m = 1 while m \u0026lt; len(alphabets[i+j+k+l:]): group += alphabets[i+j+k+l+m] count = has_no_string(file_in,group) if count \u0026gt; count_word: count_word = count namegroup = group m += 1 l += 1 k += 1 j += 1 i += 1 print(\u0026#34;组合\u0026#34;,namegroup,\u0026#34;被排除出去的单词数目最少，单词数量为\u0026#34;,count_word) fin = open(\u0026#39;words.txt\u0026#39;) alp5group(fin) 下面是使用 in 操作符优化后的方案，可以用 in 真的太幸福了😭。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def avoids(word,ause): #ause，avoid use for i in ause: if i in word: return False return True fin = open(\u0026#39;words.txt\u0026#39;) text = input(\u0026#34;请输入一个禁止使用的字符串，字符串里的字母都不会出现在单词中\\n\u0026#34;) count = 0 #单词总数 count_n = 0 #不含用户输入字符的单词的个数 for line in fin: word = line.strip() count += 1 if avoids(word,text): count_n += 1 print(\u0026#34;不含\u0026#34;,text,\u0026#34;的单词有\u0026#34;,count_n,\u0026#34;个，单词一共：\u0026#34;,count) ","date":"Dec 29","permalink":"https://o5o.me/post/think_python_exercise_9.4/","tags":null,"title":"Think Python Exercise 9.4"},{"categories":null,"contents":"编写一个名为 avoids 的函数，接受一个单词和一个指定禁止使用字符的字符串，如果单词中不包含任意被禁止的字符，则返回True 。\n修改你的程序，提示用户输入一个禁止使用的字符，然后打印不包含这些字符的单词的数量。你能找到一个5个禁止使用字符的组合，使得其排除的单词数目最少么？\n你能找到一个\u0026quot;5个禁止使用字符\u0026quot;的组合，使得其排除的单词数目最少么？ 分析：从26个字母中挑选5个字母构成一个组合，打印不包含这些字母的单词的数量，看哪个组合下被排除出去的单词数目最少。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def avoids(word,ause): #ause，avoid use for i in ause: for letter in word: if letter == i: return False return True def has_no_string(file_in, nals): #nals指的是no alphabets，字母 count_nals = 0 #不含用户指定的各个字符的单词的个数 for line in file_in: word = line.strip() if avoids(word,nals): count_nals += 1 print(\u0026#34;不含\u0026#34;,nals,\u0026#34;的单词有\u0026#34;,count_nals,\u0026#34;个\u0026#34;) text = input(\u0026#34;请输入一个禁止使用的字符串，字符串里的字母都不会出现在单词中\\n\u0026#34;) fin = open(\u0026#39;words.txt\u0026#39;) has_no_string(fin,text) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 def avoids(word,ause): #ause，avoid use for i in ause: for letter in word: if letter == i: return False return True def has_no_string(file_in, nals): #nals指的是no alphabets，字母 count_nals = 0 #不含用户指定的各个字符的单词的个数 for line in file_in: word = line.strip() if avoids(word,nals): count_nals += 1 # print(\u0026#34;不含\u0026#34;,nals,\u0026#34;的单词有\u0026#34;,count_nals,\u0026#34;个\u0026#34;) return count_nals def alp5group(file_in): #5个字母的组合，起名困难 alphabets = \u0026#34;abcdefghijklmnopqrstuvwxyz\u0026#34; count_word = 0 # 不含指定的5个字母的单词的数量 namegroup = \u0026#39;\u0026#39; # 不含5个字符的组合，单词最多 i = 0 while i \u0026lt; len(alphabets): group = \u0026#39;\u0026#39; group += alphabets[i] j = 1 while j \u0026lt; len(alphabets[i:]): group += alphabets[i+j] k = 1 while k \u0026lt; len(alphabets[i+j:]): group += alphabets[i+j+k] l = 1 while l \u0026lt; len(alphabets[i+j+k:]): group += alphabets[i+j+k+l] m = 1 while m \u0026lt; len(alphabets[i+j+k+l:]): group += alphabets[i+j+k+l+m] count = has_no_string(file_in,group) if count \u0026gt; count_word: count_word = count namegroup = group m += 1 l += 1 k += 1 j += 1 i += 1 print(\u0026#34;组合\u0026#34;,namegroup,\u0026#34;被排除出去的单词数目最少，单词数量为\u0026#34;,count_word) fin = open(\u0026#39;words.txt\u0026#39;) alp5group(fin) 下面是使用 in 操作符优化后的方案，可以用 in 真的太幸福了😭。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def avoids(word,ause): #ause，avoid use for i in ause: if i in word: return False return True fin = open(\u0026#39;words.txt\u0026#39;) text = input(\u0026#34;请输入一个禁止使用的字符串，字符串里的字母都不会出现在单词中\\n\u0026#34;) count = 0 #单词总数 count_n = 0 #不含用户输入字符的单词的个数 for line in fin: word = line.strip() count += 1 if avoids(word,text): count_n += 1 print(\u0026#34;不含\u0026#34;,text,\u0026#34;的单词有\u0026#34;,count_n,\u0026#34;个，单词一共：\u0026#34;,count) ","date":"Dec 29","permalink":"https://o5o.me/post/think_python_exercise_9.3/","tags":null,"title":"Think Python Exercise 9.3"},{"categories":null,"contents":"1939年，Ernest Vincent Wright出版了一本名为 《Gadsby》 的小说，该小说里完全没有使用字符“e”。由于“e”是最常用的英文字符，因此这并不容易做到。\n事实上，不使用这个最常用的符号(字符e)来构建一个孤立的想法是很难的。开始进展缓慢，但是经过有意识的、长时间的训练，你可以逐渐地熟练。\n好啦，不再说题外话了（让我们开始编程练习）。\n写一个叫做has_no_e的函数，如果给定的单词中不包含字符“e”，其返回 True 。\n修改上一节中的程序，只打印不包含“e”的单词，并且计算列表中不含“e”单词的比例。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 fin = open(\u0026#39;words.txt\u0026#39;) def has_no_e(file_in): count_ne = 0 #不含e的单词的个数 count = 0 #总单词个数 for line in file_in: word = line.strip() index = 0 while index \u0026lt; len(word): if word[index] == \u0026#39;e\u0026#39;: break else: index = index + 1 if index == len(word): # print(word) #因为单词比较多，不一个个列出来了 count_ne = count_ne + 1 count = count + 1 print(\u0026#34;不含e的单词有\u0026#34;,count_ne,\u0026#34;个\u0026#34;,\u0026#34;单词一共有\u0026#34;,count,\u0026#34;个\u0026#34;,\u0026#34;不含“e”单词的比例为\u0026#34;,count_ne/count*100,\u0026#34;%\u0026#34;) has_no_e(fin) 上面是一个字母一个字母判断单词是不是包含‘e’的，下面是在 if 中使用 in 操作符简化后的方案：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 def has_no_e(word): if \u0026#39;e\u0026#39; not in word: return True else: return False fin = open(\u0026#39;words.txt\u0026#39;) count = 0 #单词总数 count_ne = 0 #不含e的单词数 for line in fin: word = line.strip() count += 1 if has_no_e(word): count_ne += 1 #print(word) print(\u0026#34;不含e的单词有\u0026#34;,count_ne,\u0026#34;个\u0026#34;,\u0026#34;单词一共有\u0026#34;,count,\u0026#34;个\u0026#34;,\u0026#34;不含“e”单词的比例为\u0026#34;,count_ne/count*100,\u0026#34;%\u0026#34;) 所得结果都是一样的：\n不含e的单词有 37641 个 单词一共有 113809 个 不含“e”单词的比例为 33.07383423103621 %\n","date":"Dec 29","permalink":"https://o5o.me/post/think_python_exercise_9.2/","tags":null,"title":"Think Python Exercise 9.2"},{"categories":null,"contents":"编程写一个程序，使得它可以读取 words.txt　，然后只打印出那些长度超过20个字符的单词(不包括空格)。\n1 2 3 4 5 6 fin = open(\u0026#39;words.txt\u0026#39;) for line in fin: word = line.strip() if len(word) \u0026gt; 20: print(word) ","date":"Dec 28","permalink":"https://o5o.me/post/think_python_exercise_9.1/","tags":null,"title":"Think Python Exercise 9.1"},{"categories":null,"contents":"","date":"Jan 01","permalink":"https://o5o.me/articles/","tags":null,"title":"Articles"}]