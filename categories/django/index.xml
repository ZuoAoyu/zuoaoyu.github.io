<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Django on 侠客</title><link>https://o5o.me/categories/django/</link><description>Recent content in Django on 侠客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 13 Feb 2023 11:34:54 +0800</lastBuildDate><atom:link href="https://o5o.me/categories/django/index.xml" rel="self" type="application/rss+xml"/><item><title>Django开发环境和生产环境分离</title><link>https://o5o.me/post/django_separate_dev_and_prod_environment/</link><pubDate>Mon, 13 Feb 2023 11:34:54 +0800</pubDate><guid>https://o5o.me/post/django_separate_dev_and_prod_environment/</guid><description>在项目开发环境和生产环境，配置往往是不同的，例如在前者往往我们要打开DEBUG模式、为方便会使用sqlite数据库、使用Django自带的WSGIServer；但在生产环境，我们会关闭DEBUG模式，使用MySQL、PostgreSQL这样的数据库、使用Gunicorn和Nginx代替默认web服务、采用更为严格的访问限制。
项目往往是要同时运行在开发环境和生产环境中的，那么怎样实现两套配置分开呢？
在将项目部署至Platform.sh时，两环境分离的做法是，在settings.py文件中做一个条件判断，如果config.is_valid_platform()为真，就用生产环境中的配置覆盖默认配置。该做法给了我启发。
如果是将项目部署在普通VPS上的话，我们可以设一个环境变量，如果该环境变量存在或为某个值，就表明是生产环境，应用某些配置。
在服务器上项目的根目录，运行下述命令：
1 2 3 4 5 6 7 8 #写入文件 echo &amp;#34;export SECRET_ENVIRON=&amp;#39;produc&amp;#39;&amp;#34; &amp;gt;&amp;gt; .DJANGO_SECRET cat .DJANGO_SECRET #查看文件内容 source .DJANGO_SECRET # 读取并导入环境变量 env #查看系统环境变量 在项目settings.py文件中，就可以对应这样写：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # 根据环境变量判断为生产环境还是开发环境 import os --snip-- try: environ = os.environ[&amp;#34;SECRET_ENVIRON&amp;#34;] except KeyError as e: raise RuntimeError(&amp;#34;Could not find a SECRET_KEY in environment&amp;#34;) from e if environ: # 如果环境变量存在 DEBUG = False DATABASES = {} SECURE_REFERRER_POLICY = &amp;#34;&amp;#34; # 等等 先尝试读取环境变量，如果没有该变量就引发错误，有的话就用新设置项覆盖settings.</description></item></channel></rss>